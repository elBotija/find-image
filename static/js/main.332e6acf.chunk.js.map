{"version":3,"sources":["components/Form.js","components/Images.js","App.js","serviceWorker.js","index.js"],"names":["Form","search","React","createRef","e","preventDefault","this","current","value","length","console","log","props","setSearch","className","onSubmit","_sendSearch","type","ref","placeholder","class","name","Component","Images","data","map","i","src","previewURL","alt","user","imageWidth","imageHeight","href","largeImageURL","target","App","useState","getSearch","getData","setData","getPage","setPage","getTotalPages","setTotalPages","useEffect","getApi","a","imgs","url","fetch","then","res","json","hits","Math","ceil","totalHits","document","querySelector","scrollIntoView","prevPage","nextPage","Fragment","onClick","_showPageButtons","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAmCeA,E,2MA/BXC,OAASC,IAAMC,Y,2EAEHC,GACRA,EAAEC,iBACF,IAAIJ,EAASK,KAAKL,OAAOM,QAAQC,MAC9BP,EAAOQ,SACNC,QAAQC,IAAI,MAAOL,KAAKM,OACxBN,KAAKM,MAAMC,UAAUZ,M,+BAInB,IAAD,OACL,OACI,yBAAKa,UAAU,OACX,0BAAMA,UAAU,UAAWC,SAAU,SAACX,GAAD,OAAO,EAAKY,YAAYZ,KACzD,yBAAKU,UAAU,OACX,yBAAKA,UAAU,uBACX,2BAAOG,KAAK,OAAOC,IAAKZ,KAAKL,OAAQkB,YAAY,sBAErD,yBAAKL,UAAU,sBACX,4BAAQM,MAAM,+BAA+BH,KAAK,SAASI,KAAK,UAAhE,SACI,uBAAGD,MAAM,wBAAT,iB,GAtBbE,aC4BJC,E,iLA1BD,IACEC,EAASlB,KAAKM,MAAdY,KACR,OAAIA,EAAKf,OAEL,yBAAKK,UAAU,oBACVU,EAAKC,KAAI,SAAAC,GAAC,OACP,yBAAKZ,UAAU,kBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKa,IAAKD,EAAEE,WAAYC,IAAKH,EAAEI,QAEnC,yBAAKhB,UAAU,gBACX,yCAAYY,EAAEK,WAAd,MAA6BL,EAAEM,aAC/B,qCAAWN,EAAEI,OAEjB,yBAAKhB,UAAU,eACX,uBAAGmB,KAAMP,EAAEQ,cAAeC,OAAO,WAAjC,sBAdA,O,GAJXb,aC4DNc,MA1Df,WAAgB,IAAD,EACkBC,mBAAS,IAD3B,mBACNC,EADM,KACKzB,EADL,OAEcwB,mBAAS,IAFvB,mBAENE,EAFM,KAEGC,EAFH,OAGcH,mBAAS,GAHvB,mBAGNI,EAHM,KAGGC,EAHH,OAI0BL,mBAAS,GAJnC,mBAINM,EAJM,KAISC,EAJT,KAQbC,qBAAW,WACT,IAAMC,EAAM,uCAAG,gCAAAC,EAAA,4DACA,qCACTC,EAAO,GACPC,EAHS,uCACA,qCADA,cAGyCX,EAHzC,qBAG+DU,EAH/D,iBAG4EP,GAH5E,SAIIS,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAAWA,EAAIC,UAJnC,OAIT7B,EAJS,OAKbgB,EAAQhB,EAAK8B,MACbV,EAAcW,KAAKC,KAAMhC,EAAKiC,UAAYT,IAE3BU,SAASC,cAAc,QAC/BC,eAAe,SAAS,SATlB,4CAAH,qDAWTtB,EAAU7B,QACXqC,MAEF,CAACR,EAAWG,IAEd,IAAMoB,EAAW,WACZpB,EAAU,GAEXC,EADgBD,EAAU,IAIxBqB,EAAW,WACZrB,EAAUE,GAEXD,EADgBD,EAAU,IAgB9B,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAMD,UAAWA,IACjB,kBAAC,EAAD,CAAQW,KAAMe,IAfO,WAEvB,GAAGA,EAAQ9B,OACT,OACE,kBAAC,IAAMsD,SAAP,KACE,4BAAQjD,UAAU,+BAA+BkD,QAASH,GAA1D,YACA,4BAAQ/C,UAAU,+BAA+BkD,QAASF,GAA1D,cAUFG,KC9CYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASe,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.332e6acf.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass Form extends Component {\n    search = React.createRef()\n    \n    _sendSearch(e){\n        e.preventDefault()\n        let search = this.search.current.value\n        if(search.length){\n            console.log(\"fee\", this.props)\n            this.props.setSearch(search)\n        }\n    }\n\n    render() { \n        return ( \n            <div className=\"row\">\n                <form className=\"col s12\"  onSubmit={(e) => this._sendSearch(e)}>\n                    <div className=\"row\">\n                        <div className=\"input-field col s10\">\n                            <input type=\"text\" ref={this.search} placeholder=\"Busca una imagen\"/>\n                        </div>\n                        <div className=\"input-field col s2\">\n                            <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Submit\n                                <i class=\"material-icons right\">send</i>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n \nexport default Form;","import React, { Component } from 'react';\n\n\nclass Images extends Component {\n    \n    render() { \n        const { data } = this.props\n        if(!data.length) return ''\n        return ( \n            <div className=\"row parent-cards\">\n                {data.map(i => (\n                    <div className=\"card-container\" >\n                        <div className=\"card\">\n                            <div className=\"card-image\">\n                                <img src={i.previewURL} alt={i.user}/>\n                            </div>\n                            <div className=\"card-content\">\n                                <p>Tama√±o: {i.imageWidth} x {i.imageHeight}</p>\n                                <p>Autor: {i.user}</p>\n                            </div>\n                            <div className=\"card-action\">\n                                <a href={i.largeImageURL} target=\"_blanck\"> Ver Imagen</a>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n}\n \nexport default Images;","import React, {useState, useEffect} from 'react';\nimport './app.scss'\nimport Form from './components/Form'\nimport Images from './components/Images'\n\nfunction App() {\n  const [getSearch, setSearch] = useState('')\n  const [getData, setData] = useState('')\n  const [getPage, setPage] = useState(1)\n  const [getTotalPages, setTotalPages] = useState(1)\n\n\n  \n  useEffect( () => {\n    const getApi = async () => {\n      let apiKey = '13869945-f3cf8394b512123b517515782';\n      let imgs = 30\n      let url = `https://pixabay.com/api/?key=${apiKey}&q=${getSearch}&per_page=${imgs}&page=${getPage}`\n      let data = await fetch(url).then((res) => ( res.json() ))\n      setData(data.hits)\n      setTotalPages(Math.ceil( data.totalHits / imgs))\n\n      const goToUp = document.querySelector('.App')\n      goToUp.scrollIntoView('smooth','start')\n    }\n    if(getSearch.length){\n      getApi()\n    }\n  },[getSearch, getPage])\n\n  const prevPage = () => {\n    if(getPage > 0){\n      let goToPage =  getPage - 1\n      setPage(goToPage)\n    }\n  }\n  const nextPage = () => {\n    if(getPage < getTotalPages){\n      let goToPage =  getPage + 1\n      setPage(goToPage)\n    }\n  }\n  const _showPageButtons = () => {\n\n    if(getData.length){\n      return(\n        <React.Fragment>\n          <button className=\"btn waves-effect waves-light\" onClick={prevPage}>Anterior</button>\n          <button className=\"btn waves-effect waves-light\" onClick={nextPage}>Siguiente</button>\n        </React.Fragment>\n      )\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Form setSearch={setSearch}/>\n      <Images data={getData}/>\n      { _showPageButtons()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}